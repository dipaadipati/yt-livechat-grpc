// source: stream_list.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.youtube.api.v3.ChannelProfileDetails', null, global);
goog.exportSymbol('proto.youtube.api.v3.LiveChatFanFundingEventDetails', null, global);
goog.exportSymbol('proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails', null, global);
goog.exportSymbol('proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails', null, global);
goog.exportSymbol('proto.youtube.api.v3.LiveChatMembershipGiftingDetails', null, global);
goog.exportSymbol('proto.youtube.api.v3.LiveChatMessage', null, global);
goog.exportSymbol('proto.youtube.api.v3.LiveChatMessageAuthorDetails', null, global);
goog.exportSymbol('proto.youtube.api.v3.LiveChatMessageDeletedDetails', null, global);
goog.exportSymbol('proto.youtube.api.v3.LiveChatMessageListRequest', null, global);
goog.exportSymbol('proto.youtube.api.v3.LiveChatMessageListResponse', null, global);
goog.exportSymbol('proto.youtube.api.v3.LiveChatMessageRetractedDetails', null, global);
goog.exportSymbol('proto.youtube.api.v3.LiveChatMessageSnippet', null, global);
goog.exportSymbol('proto.youtube.api.v3.LiveChatMessageSnippet.DisplayedContentCase', null, global);
goog.exportSymbol('proto.youtube.api.v3.LiveChatMessageSnippet.TypeWrapper', null, global);
goog.exportSymbol('proto.youtube.api.v3.LiveChatMessageSnippet.TypeWrapper.Type', null, global);
goog.exportSymbol('proto.youtube.api.v3.LiveChatNewSponsorDetails', null, global);
goog.exportSymbol('proto.youtube.api.v3.LiveChatPollDetails', null, global);
goog.exportSymbol('proto.youtube.api.v3.LiveChatPollDetails.PollMetadata', null, global);
goog.exportSymbol('proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption', null, global);
goog.exportSymbol('proto.youtube.api.v3.LiveChatPollDetails.PollStatusWrapper', null, global);
goog.exportSymbol('proto.youtube.api.v3.LiveChatPollDetails.PollStatusWrapper.PollStatus', null, global);
goog.exportSymbol('proto.youtube.api.v3.LiveChatSuperChatDetails', null, global);
goog.exportSymbol('proto.youtube.api.v3.LiveChatSuperStickerDetails', null, global);
goog.exportSymbol('proto.youtube.api.v3.LiveChatTextMessageDetails', null, global);
goog.exportSymbol('proto.youtube.api.v3.LiveChatUserBannedMessageDetails', null, global);
goog.exportSymbol('proto.youtube.api.v3.LiveChatUserBannedMessageDetails.BanTypeWrapper', null, global);
goog.exportSymbol('proto.youtube.api.v3.LiveChatUserBannedMessageDetails.BanTypeWrapper.BanType', null, global);
goog.exportSymbol('proto.youtube.api.v3.PageInfo', null, global);
goog.exportSymbol('proto.youtube.api.v3.SuperChatEventSnippet', null, global);
goog.exportSymbol('proto.youtube.api.v3.SuperStickerMetadata', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.youtube.api.v3.LiveChatMessageListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.youtube.api.v3.LiveChatMessageListRequest.repeatedFields_, null);
};
goog.inherits(proto.youtube.api.v3.LiveChatMessageListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.youtube.api.v3.LiveChatMessageListRequest.displayName = 'proto.youtube.api.v3.LiveChatMessageListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.youtube.api.v3.LiveChatMessageListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, proto.youtube.api.v3.LiveChatMessageListResponse.repeatedFields_, null);
};
goog.inherits(proto.youtube.api.v3.LiveChatMessageListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.youtube.api.v3.LiveChatMessageListResponse.displayName = 'proto.youtube.api.v3.LiveChatMessageListResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.youtube.api.v3.LiveChatMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.youtube.api.v3.LiveChatMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.youtube.api.v3.LiveChatMessage.displayName = 'proto.youtube.api.v3.LiveChatMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.youtube.api.v3.LiveChatMessageAuthorDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.youtube.api.v3.LiveChatMessageAuthorDetails.displayName = 'proto.youtube.api.v3.LiveChatMessageAuthorDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.youtube.api.v3.LiveChatMessageSnippet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.youtube.api.v3.LiveChatMessageSnippet.oneofGroups_);
};
goog.inherits(proto.youtube.api.v3.LiveChatMessageSnippet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.youtube.api.v3.LiveChatMessageSnippet.displayName = 'proto.youtube.api.v3.LiveChatMessageSnippet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.youtube.api.v3.LiveChatMessageSnippet.TypeWrapper = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.youtube.api.v3.LiveChatMessageSnippet.TypeWrapper, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.youtube.api.v3.LiveChatMessageSnippet.TypeWrapper.displayName = 'proto.youtube.api.v3.LiveChatMessageSnippet.TypeWrapper';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.youtube.api.v3.LiveChatTextMessageDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.youtube.api.v3.LiveChatTextMessageDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.youtube.api.v3.LiveChatTextMessageDetails.displayName = 'proto.youtube.api.v3.LiveChatTextMessageDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.youtube.api.v3.LiveChatMessageDeletedDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.youtube.api.v3.LiveChatMessageDeletedDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.youtube.api.v3.LiveChatMessageDeletedDetails.displayName = 'proto.youtube.api.v3.LiveChatMessageDeletedDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.youtube.api.v3.LiveChatMessageRetractedDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.youtube.api.v3.LiveChatMessageRetractedDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.youtube.api.v3.LiveChatMessageRetractedDetails.displayName = 'proto.youtube.api.v3.LiveChatMessageRetractedDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.youtube.api.v3.LiveChatUserBannedMessageDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.youtube.api.v3.LiveChatUserBannedMessageDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.youtube.api.v3.LiveChatUserBannedMessageDetails.displayName = 'proto.youtube.api.v3.LiveChatUserBannedMessageDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.youtube.api.v3.LiveChatUserBannedMessageDetails.BanTypeWrapper = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.youtube.api.v3.LiveChatUserBannedMessageDetails.BanTypeWrapper, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.youtube.api.v3.LiveChatUserBannedMessageDetails.BanTypeWrapper.displayName = 'proto.youtube.api.v3.LiveChatUserBannedMessageDetails.BanTypeWrapper';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.youtube.api.v3.LiveChatSuperChatDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.youtube.api.v3.LiveChatSuperChatDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.youtube.api.v3.LiveChatSuperChatDetails.displayName = 'proto.youtube.api.v3.LiveChatSuperChatDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.youtube.api.v3.LiveChatSuperStickerDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.youtube.api.v3.LiveChatSuperStickerDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.youtube.api.v3.LiveChatSuperStickerDetails.displayName = 'proto.youtube.api.v3.LiveChatSuperStickerDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.youtube.api.v3.LiveChatFanFundingEventDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.youtube.api.v3.LiveChatFanFundingEventDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.youtube.api.v3.LiveChatFanFundingEventDetails.displayName = 'proto.youtube.api.v3.LiveChatFanFundingEventDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.youtube.api.v3.LiveChatNewSponsorDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.youtube.api.v3.LiveChatNewSponsorDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.youtube.api.v3.LiveChatNewSponsorDetails.displayName = 'proto.youtube.api.v3.LiveChatNewSponsorDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails.displayName = 'proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.youtube.api.v3.LiveChatMembershipGiftingDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.youtube.api.v3.LiveChatMembershipGiftingDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.youtube.api.v3.LiveChatMembershipGiftingDetails.displayName = 'proto.youtube.api.v3.LiveChatMembershipGiftingDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails.displayName = 'proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.youtube.api.v3.LiveChatPollDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.youtube.api.v3.LiveChatPollDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.youtube.api.v3.LiveChatPollDetails.displayName = 'proto.youtube.api.v3.LiveChatPollDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.youtube.api.v3.LiveChatPollDetails.PollMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.repeatedFields_, null);
};
goog.inherits(proto.youtube.api.v3.LiveChatPollDetails.PollMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.displayName = 'proto.youtube.api.v3.LiveChatPollDetails.PollMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption.displayName = 'proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.youtube.api.v3.LiveChatPollDetails.PollStatusWrapper = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.youtube.api.v3.LiveChatPollDetails.PollStatusWrapper, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.youtube.api.v3.LiveChatPollDetails.PollStatusWrapper.displayName = 'proto.youtube.api.v3.LiveChatPollDetails.PollStatusWrapper';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.youtube.api.v3.SuperChatEventSnippet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.youtube.api.v3.SuperChatEventSnippet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.youtube.api.v3.SuperChatEventSnippet.displayName = 'proto.youtube.api.v3.SuperChatEventSnippet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.youtube.api.v3.SuperStickerMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.youtube.api.v3.SuperStickerMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.youtube.api.v3.SuperStickerMetadata.displayName = 'proto.youtube.api.v3.SuperStickerMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.youtube.api.v3.ChannelProfileDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.youtube.api.v3.ChannelProfileDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.youtube.api.v3.ChannelProfileDetails.displayName = 'proto.youtube.api.v3.ChannelProfileDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.youtube.api.v3.PageInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.youtube.api.v3.PageInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.youtube.api.v3.PageInfo.displayName = 'proto.youtube.api.v3.PageInfo';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.youtube.api.v3.LiveChatMessageListRequest.repeatedFields_ = [100];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.youtube.api.v3.LiveChatMessageListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.youtube.api.v3.LiveChatMessageListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.youtube.api.v3.LiveChatMessageListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatMessageListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    liveChatId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    hl: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    profileImageSize: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    maxResults: (f = jspb.Message.getField(msg, 98)) == null ? undefined : f,
    pageToken: (f = jspb.Message.getField(msg, 99)) == null ? undefined : f,
    partList: (f = jspb.Message.getRepeatedField(msg, 100)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.youtube.api.v3.LiveChatMessageListRequest}
 */
proto.youtube.api.v3.LiveChatMessageListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.youtube.api.v3.LiveChatMessageListRequest;
  return proto.youtube.api.v3.LiveChatMessageListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.youtube.api.v3.LiveChatMessageListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.youtube.api.v3.LiveChatMessageListRequest}
 */
proto.youtube.api.v3.LiveChatMessageListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLiveChatId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHl(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setProfileImageSize(value);
      break;
    case 98:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxResults(value);
      break;
    case 99:
      var value = /** @type {string} */ (reader.readString());
      msg.setPageToken(value);
      break;
    case 100:
      var value = /** @type {string} */ (reader.readString());
      msg.addPart(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.youtube.api.v3.LiveChatMessageListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.youtube.api.v3.LiveChatMessageListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.youtube.api.v3.LiveChatMessageListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatMessageListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 98));
  if (f != null) {
    writer.writeUint32(
      98,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 99));
  if (f != null) {
    writer.writeString(
      99,
      f
    );
  }
  f = message.getPartList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      100,
      f
    );
  }
};


/**
 * optional string live_chat_id = 1;
 * @return {string}
 */
proto.youtube.api.v3.LiveChatMessageListRequest.prototype.getLiveChatId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.LiveChatMessageListRequest} returns this
 */
proto.youtube.api.v3.LiveChatMessageListRequest.prototype.setLiveChatId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessageListRequest} returns this
 */
proto.youtube.api.v3.LiveChatMessageListRequest.prototype.clearLiveChatId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageListRequest.prototype.hasLiveChatId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string hl = 2;
 * @return {string}
 */
proto.youtube.api.v3.LiveChatMessageListRequest.prototype.getHl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.LiveChatMessageListRequest} returns this
 */
proto.youtube.api.v3.LiveChatMessageListRequest.prototype.setHl = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessageListRequest} returns this
 */
proto.youtube.api.v3.LiveChatMessageListRequest.prototype.clearHl = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageListRequest.prototype.hasHl = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 profile_image_size = 3;
 * @return {number}
 */
proto.youtube.api.v3.LiveChatMessageListRequest.prototype.getProfileImageSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.youtube.api.v3.LiveChatMessageListRequest} returns this
 */
proto.youtube.api.v3.LiveChatMessageListRequest.prototype.setProfileImageSize = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessageListRequest} returns this
 */
proto.youtube.api.v3.LiveChatMessageListRequest.prototype.clearProfileImageSize = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageListRequest.prototype.hasProfileImageSize = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 max_results = 98;
 * @return {number}
 */
proto.youtube.api.v3.LiveChatMessageListRequest.prototype.getMaxResults = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 98, 0));
};


/**
 * @param {number} value
 * @return {!proto.youtube.api.v3.LiveChatMessageListRequest} returns this
 */
proto.youtube.api.v3.LiveChatMessageListRequest.prototype.setMaxResults = function(value) {
  return jspb.Message.setField(this, 98, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessageListRequest} returns this
 */
proto.youtube.api.v3.LiveChatMessageListRequest.prototype.clearMaxResults = function() {
  return jspb.Message.setField(this, 98, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageListRequest.prototype.hasMaxResults = function() {
  return jspb.Message.getField(this, 98) != null;
};


/**
 * optional string page_token = 99;
 * @return {string}
 */
proto.youtube.api.v3.LiveChatMessageListRequest.prototype.getPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 99, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.LiveChatMessageListRequest} returns this
 */
proto.youtube.api.v3.LiveChatMessageListRequest.prototype.setPageToken = function(value) {
  return jspb.Message.setField(this, 99, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessageListRequest} returns this
 */
proto.youtube.api.v3.LiveChatMessageListRequest.prototype.clearPageToken = function() {
  return jspb.Message.setField(this, 99, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageListRequest.prototype.hasPageToken = function() {
  return jspb.Message.getField(this, 99) != null;
};


/**
 * repeated string part = 100;
 * @return {!Array<string>}
 */
proto.youtube.api.v3.LiveChatMessageListRequest.prototype.getPartList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 100));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.youtube.api.v3.LiveChatMessageListRequest} returns this
 */
proto.youtube.api.v3.LiveChatMessageListRequest.prototype.setPartList = function(value) {
  return jspb.Message.setField(this, 100, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.youtube.api.v3.LiveChatMessageListRequest} returns this
 */
proto.youtube.api.v3.LiveChatMessageListRequest.prototype.addPart = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 100, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.youtube.api.v3.LiveChatMessageListRequest} returns this
 */
proto.youtube.api.v3.LiveChatMessageListRequest.prototype.clearPartList = function() {
  return this.setPartList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.youtube.api.v3.LiveChatMessageListResponse.repeatedFields_ = [1007];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.youtube.api.v3.LiveChatMessageListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.youtube.api.v3.LiveChatMessageListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.youtube.api.v3.LiveChatMessageListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatMessageListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    kind: (f = jspb.Message.getField(msg, 200)) == null ? undefined : f,
    etag: (f = jspb.Message.getField(msg, 201)) == null ? undefined : f,
    offlineAt: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    pageInfo: (f = msg.getPageInfo()) && proto.youtube.api.v3.PageInfo.toObject(includeInstance, f),
    nextPageToken: (f = jspb.Message.getField(msg, 100602)) == null ? undefined : f,
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.youtube.api.v3.LiveChatMessage.toObject, includeInstance),
    activePollItem: (f = msg.getActivePollItem()) && proto.youtube.api.v3.LiveChatMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.youtube.api.v3.LiveChatMessageListResponse}
 */
proto.youtube.api.v3.LiveChatMessageListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.youtube.api.v3.LiveChatMessageListResponse;
  return proto.youtube.api.v3.LiveChatMessageListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.youtube.api.v3.LiveChatMessageListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.youtube.api.v3.LiveChatMessageListResponse}
 */
proto.youtube.api.v3.LiveChatMessageListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 200:
      var value = /** @type {string} */ (reader.readString());
      msg.setKind(value);
      break;
    case 201:
      var value = /** @type {string} */ (reader.readString());
      msg.setEtag(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOfflineAt(value);
      break;
    case 1004:
      var value = new proto.youtube.api.v3.PageInfo;
      reader.readMessage(value,proto.youtube.api.v3.PageInfo.deserializeBinaryFromReader);
      msg.setPageInfo(value);
      break;
    case 100602:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextPageToken(value);
      break;
    case 1007:
      var value = new proto.youtube.api.v3.LiveChatMessage;
      reader.readMessage(value,proto.youtube.api.v3.LiveChatMessage.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    case 1008:
      var value = new proto.youtube.api.v3.LiveChatMessage;
      reader.readMessage(value,proto.youtube.api.v3.LiveChatMessage.deserializeBinaryFromReader);
      msg.setActivePollItem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.youtube.api.v3.LiveChatMessageListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.youtube.api.v3.LiveChatMessageListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.youtube.api.v3.LiveChatMessageListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatMessageListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 200));
  if (f != null) {
    writer.writeString(
      200,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 201));
  if (f != null) {
    writer.writeString(
      201,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPageInfo();
  if (f != null) {
    writer.writeMessage(
      1004,
      f,
      proto.youtube.api.v3.PageInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 100602));
  if (f != null) {
    writer.writeString(
      100602,
      f
    );
  }
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1007,
      f,
      proto.youtube.api.v3.LiveChatMessage.serializeBinaryToWriter
    );
  }
  f = message.getActivePollItem();
  if (f != null) {
    writer.writeMessage(
      1008,
      f,
      proto.youtube.api.v3.LiveChatMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional string kind = 200;
 * @return {string}
 */
proto.youtube.api.v3.LiveChatMessageListResponse.prototype.getKind = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 200, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.LiveChatMessageListResponse} returns this
 */
proto.youtube.api.v3.LiveChatMessageListResponse.prototype.setKind = function(value) {
  return jspb.Message.setField(this, 200, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessageListResponse} returns this
 */
proto.youtube.api.v3.LiveChatMessageListResponse.prototype.clearKind = function() {
  return jspb.Message.setField(this, 200, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageListResponse.prototype.hasKind = function() {
  return jspb.Message.getField(this, 200) != null;
};


/**
 * optional string etag = 201;
 * @return {string}
 */
proto.youtube.api.v3.LiveChatMessageListResponse.prototype.getEtag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 201, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.LiveChatMessageListResponse} returns this
 */
proto.youtube.api.v3.LiveChatMessageListResponse.prototype.setEtag = function(value) {
  return jspb.Message.setField(this, 201, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessageListResponse} returns this
 */
proto.youtube.api.v3.LiveChatMessageListResponse.prototype.clearEtag = function() {
  return jspb.Message.setField(this, 201, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageListResponse.prototype.hasEtag = function() {
  return jspb.Message.getField(this, 201) != null;
};


/**
 * optional string offline_at = 2;
 * @return {string}
 */
proto.youtube.api.v3.LiveChatMessageListResponse.prototype.getOfflineAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.LiveChatMessageListResponse} returns this
 */
proto.youtube.api.v3.LiveChatMessageListResponse.prototype.setOfflineAt = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessageListResponse} returns this
 */
proto.youtube.api.v3.LiveChatMessageListResponse.prototype.clearOfflineAt = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageListResponse.prototype.hasOfflineAt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PageInfo page_info = 1004;
 * @return {?proto.youtube.api.v3.PageInfo}
 */
proto.youtube.api.v3.LiveChatMessageListResponse.prototype.getPageInfo = function() {
  return /** @type{?proto.youtube.api.v3.PageInfo} */ (
    jspb.Message.getWrapperField(this, proto.youtube.api.v3.PageInfo, 1004));
};


/**
 * @param {?proto.youtube.api.v3.PageInfo|undefined} value
 * @return {!proto.youtube.api.v3.LiveChatMessageListResponse} returns this
*/
proto.youtube.api.v3.LiveChatMessageListResponse.prototype.setPageInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1004, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessageListResponse} returns this
 */
proto.youtube.api.v3.LiveChatMessageListResponse.prototype.clearPageInfo = function() {
  return this.setPageInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageListResponse.prototype.hasPageInfo = function() {
  return jspb.Message.getField(this, 1004) != null;
};


/**
 * optional string next_page_token = 100602;
 * @return {string}
 */
proto.youtube.api.v3.LiveChatMessageListResponse.prototype.getNextPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 100602, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.LiveChatMessageListResponse} returns this
 */
proto.youtube.api.v3.LiveChatMessageListResponse.prototype.setNextPageToken = function(value) {
  return jspb.Message.setField(this, 100602, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessageListResponse} returns this
 */
proto.youtube.api.v3.LiveChatMessageListResponse.prototype.clearNextPageToken = function() {
  return jspb.Message.setField(this, 100602, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageListResponse.prototype.hasNextPageToken = function() {
  return jspb.Message.getField(this, 100602) != null;
};


/**
 * repeated LiveChatMessage items = 1007;
 * @return {!Array<!proto.youtube.api.v3.LiveChatMessage>}
 */
proto.youtube.api.v3.LiveChatMessageListResponse.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.youtube.api.v3.LiveChatMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.youtube.api.v3.LiveChatMessage, 1007));
};


/**
 * @param {!Array<!proto.youtube.api.v3.LiveChatMessage>} value
 * @return {!proto.youtube.api.v3.LiveChatMessageListResponse} returns this
*/
proto.youtube.api.v3.LiveChatMessageListResponse.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1007, value);
};


/**
 * @param {!proto.youtube.api.v3.LiveChatMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.youtube.api.v3.LiveChatMessage}
 */
proto.youtube.api.v3.LiveChatMessageListResponse.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1007, opt_value, proto.youtube.api.v3.LiveChatMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.youtube.api.v3.LiveChatMessageListResponse} returns this
 */
proto.youtube.api.v3.LiveChatMessageListResponse.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};


/**
 * optional LiveChatMessage active_poll_item = 1008;
 * @return {?proto.youtube.api.v3.LiveChatMessage}
 */
proto.youtube.api.v3.LiveChatMessageListResponse.prototype.getActivePollItem = function() {
  return /** @type{?proto.youtube.api.v3.LiveChatMessage} */ (
    jspb.Message.getWrapperField(this, proto.youtube.api.v3.LiveChatMessage, 1008));
};


/**
 * @param {?proto.youtube.api.v3.LiveChatMessage|undefined} value
 * @return {!proto.youtube.api.v3.LiveChatMessageListResponse} returns this
*/
proto.youtube.api.v3.LiveChatMessageListResponse.prototype.setActivePollItem = function(value) {
  return jspb.Message.setWrapperField(this, 1008, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessageListResponse} returns this
 */
proto.youtube.api.v3.LiveChatMessageListResponse.prototype.clearActivePollItem = function() {
  return this.setActivePollItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageListResponse.prototype.hasActivePollItem = function() {
  return jspb.Message.getField(this, 1008) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.youtube.api.v3.LiveChatMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.youtube.api.v3.LiveChatMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.youtube.api.v3.LiveChatMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    kind: (f = jspb.Message.getField(msg, 200)) == null ? undefined : f,
    etag: (f = jspb.Message.getField(msg, 201)) == null ? undefined : f,
    id: (f = jspb.Message.getField(msg, 101)) == null ? undefined : f,
    snippet: (f = msg.getSnippet()) && proto.youtube.api.v3.LiveChatMessageSnippet.toObject(includeInstance, f),
    authorDetails: (f = msg.getAuthorDetails()) && proto.youtube.api.v3.LiveChatMessageAuthorDetails.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.youtube.api.v3.LiveChatMessage}
 */
proto.youtube.api.v3.LiveChatMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.youtube.api.v3.LiveChatMessage;
  return proto.youtube.api.v3.LiveChatMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.youtube.api.v3.LiveChatMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.youtube.api.v3.LiveChatMessage}
 */
proto.youtube.api.v3.LiveChatMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 200:
      var value = /** @type {string} */ (reader.readString());
      msg.setKind(value);
      break;
    case 201:
      var value = /** @type {string} */ (reader.readString());
      msg.setEtag(value);
      break;
    case 101:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.youtube.api.v3.LiveChatMessageSnippet;
      reader.readMessage(value,proto.youtube.api.v3.LiveChatMessageSnippet.deserializeBinaryFromReader);
      msg.setSnippet(value);
      break;
    case 3:
      var value = new proto.youtube.api.v3.LiveChatMessageAuthorDetails;
      reader.readMessage(value,proto.youtube.api.v3.LiveChatMessageAuthorDetails.deserializeBinaryFromReader);
      msg.setAuthorDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.youtube.api.v3.LiveChatMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.youtube.api.v3.LiveChatMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.youtube.api.v3.LiveChatMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 200));
  if (f != null) {
    writer.writeString(
      200,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 201));
  if (f != null) {
    writer.writeString(
      201,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 101));
  if (f != null) {
    writer.writeString(
      101,
      f
    );
  }
  f = message.getSnippet();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.youtube.api.v3.LiveChatMessageSnippet.serializeBinaryToWriter
    );
  }
  f = message.getAuthorDetails();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.youtube.api.v3.LiveChatMessageAuthorDetails.serializeBinaryToWriter
    );
  }
};


/**
 * optional string kind = 200;
 * @return {string}
 */
proto.youtube.api.v3.LiveChatMessage.prototype.getKind = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 200, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.LiveChatMessage} returns this
 */
proto.youtube.api.v3.LiveChatMessage.prototype.setKind = function(value) {
  return jspb.Message.setField(this, 200, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessage} returns this
 */
proto.youtube.api.v3.LiveChatMessage.prototype.clearKind = function() {
  return jspb.Message.setField(this, 200, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessage.prototype.hasKind = function() {
  return jspb.Message.getField(this, 200) != null;
};


/**
 * optional string etag = 201;
 * @return {string}
 */
proto.youtube.api.v3.LiveChatMessage.prototype.getEtag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 201, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.LiveChatMessage} returns this
 */
proto.youtube.api.v3.LiveChatMessage.prototype.setEtag = function(value) {
  return jspb.Message.setField(this, 201, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessage} returns this
 */
proto.youtube.api.v3.LiveChatMessage.prototype.clearEtag = function() {
  return jspb.Message.setField(this, 201, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessage.prototype.hasEtag = function() {
  return jspb.Message.getField(this, 201) != null;
};


/**
 * optional string id = 101;
 * @return {string}
 */
proto.youtube.api.v3.LiveChatMessage.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 101, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.LiveChatMessage} returns this
 */
proto.youtube.api.v3.LiveChatMessage.prototype.setId = function(value) {
  return jspb.Message.setField(this, 101, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessage} returns this
 */
proto.youtube.api.v3.LiveChatMessage.prototype.clearId = function() {
  return jspb.Message.setField(this, 101, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessage.prototype.hasId = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional LiveChatMessageSnippet snippet = 2;
 * @return {?proto.youtube.api.v3.LiveChatMessageSnippet}
 */
proto.youtube.api.v3.LiveChatMessage.prototype.getSnippet = function() {
  return /** @type{?proto.youtube.api.v3.LiveChatMessageSnippet} */ (
    jspb.Message.getWrapperField(this, proto.youtube.api.v3.LiveChatMessageSnippet, 2));
};


/**
 * @param {?proto.youtube.api.v3.LiveChatMessageSnippet|undefined} value
 * @return {!proto.youtube.api.v3.LiveChatMessage} returns this
*/
proto.youtube.api.v3.LiveChatMessage.prototype.setSnippet = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessage} returns this
 */
proto.youtube.api.v3.LiveChatMessage.prototype.clearSnippet = function() {
  return this.setSnippet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessage.prototype.hasSnippet = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional LiveChatMessageAuthorDetails author_details = 3;
 * @return {?proto.youtube.api.v3.LiveChatMessageAuthorDetails}
 */
proto.youtube.api.v3.LiveChatMessage.prototype.getAuthorDetails = function() {
  return /** @type{?proto.youtube.api.v3.LiveChatMessageAuthorDetails} */ (
    jspb.Message.getWrapperField(this, proto.youtube.api.v3.LiveChatMessageAuthorDetails, 3));
};


/**
 * @param {?proto.youtube.api.v3.LiveChatMessageAuthorDetails|undefined} value
 * @return {!proto.youtube.api.v3.LiveChatMessage} returns this
*/
proto.youtube.api.v3.LiveChatMessage.prototype.setAuthorDetails = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessage} returns this
 */
proto.youtube.api.v3.LiveChatMessage.prototype.clearAuthorDetails = function() {
  return this.setAuthorDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessage.prototype.hasAuthorDetails = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.youtube.api.v3.LiveChatMessageAuthorDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.youtube.api.v3.LiveChatMessageAuthorDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelId: (f = jspb.Message.getField(msg, 10101)) == null ? undefined : f,
    channelUrl: (f = jspb.Message.getField(msg, 102)) == null ? undefined : f,
    displayName: (f = jspb.Message.getField(msg, 103)) == null ? undefined : f,
    profileImageUrl: (f = jspb.Message.getField(msg, 104)) == null ? undefined : f,
    isVerified: (f = jspb.Message.getBooleanField(msg, 4)) == null ? undefined : f,
    isChatOwner: (f = jspb.Message.getBooleanField(msg, 5)) == null ? undefined : f,
    isChatSponsor: (f = jspb.Message.getBooleanField(msg, 6)) == null ? undefined : f,
    isChatModerator: (f = jspb.Message.getBooleanField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.youtube.api.v3.LiveChatMessageAuthorDetails}
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.youtube.api.v3.LiveChatMessageAuthorDetails;
  return proto.youtube.api.v3.LiveChatMessageAuthorDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.youtube.api.v3.LiveChatMessageAuthorDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.youtube.api.v3.LiveChatMessageAuthorDetails}
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10101:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelId(value);
      break;
    case 102:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelUrl(value);
      break;
    case 103:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    case 104:
      var value = /** @type {string} */ (reader.readString());
      msg.setProfileImageUrl(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsVerified(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsChatOwner(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsChatSponsor(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsChatModerator(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.youtube.api.v3.LiveChatMessageAuthorDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.youtube.api.v3.LiveChatMessageAuthorDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 10101));
  if (f != null) {
    writer.writeString(
      10101,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 102));
  if (f != null) {
    writer.writeString(
      102,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 103));
  if (f != null) {
    writer.writeString(
      103,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 104));
  if (f != null) {
    writer.writeString(
      104,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional string channel_id = 10101;
 * @return {string}
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails.prototype.getChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10101, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.LiveChatMessageAuthorDetails} returns this
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails.prototype.setChannelId = function(value) {
  return jspb.Message.setField(this, 10101, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessageAuthorDetails} returns this
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails.prototype.clearChannelId = function() {
  return jspb.Message.setField(this, 10101, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails.prototype.hasChannelId = function() {
  return jspb.Message.getField(this, 10101) != null;
};


/**
 * optional string channel_url = 102;
 * @return {string}
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails.prototype.getChannelUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 102, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.LiveChatMessageAuthorDetails} returns this
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails.prototype.setChannelUrl = function(value) {
  return jspb.Message.setField(this, 102, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessageAuthorDetails} returns this
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails.prototype.clearChannelUrl = function() {
  return jspb.Message.setField(this, 102, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails.prototype.hasChannelUrl = function() {
  return jspb.Message.getField(this, 102) != null;
};


/**
 * optional string display_name = 103;
 * @return {string}
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 103, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.LiveChatMessageAuthorDetails} returns this
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails.prototype.setDisplayName = function(value) {
  return jspb.Message.setField(this, 103, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessageAuthorDetails} returns this
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails.prototype.clearDisplayName = function() {
  return jspb.Message.setField(this, 103, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails.prototype.hasDisplayName = function() {
  return jspb.Message.getField(this, 103) != null;
};


/**
 * optional string profile_image_url = 104;
 * @return {string}
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails.prototype.getProfileImageUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 104, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.LiveChatMessageAuthorDetails} returns this
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails.prototype.setProfileImageUrl = function(value) {
  return jspb.Message.setField(this, 104, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessageAuthorDetails} returns this
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails.prototype.clearProfileImageUrl = function() {
  return jspb.Message.setField(this, 104, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails.prototype.hasProfileImageUrl = function() {
  return jspb.Message.getField(this, 104) != null;
};


/**
 * optional bool is_verified = 4;
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails.prototype.getIsVerified = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.youtube.api.v3.LiveChatMessageAuthorDetails} returns this
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails.prototype.setIsVerified = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessageAuthorDetails} returns this
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails.prototype.clearIsVerified = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails.prototype.hasIsVerified = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool is_chat_owner = 5;
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails.prototype.getIsChatOwner = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.youtube.api.v3.LiveChatMessageAuthorDetails} returns this
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails.prototype.setIsChatOwner = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessageAuthorDetails} returns this
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails.prototype.clearIsChatOwner = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails.prototype.hasIsChatOwner = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool is_chat_sponsor = 6;
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails.prototype.getIsChatSponsor = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.youtube.api.v3.LiveChatMessageAuthorDetails} returns this
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails.prototype.setIsChatSponsor = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessageAuthorDetails} returns this
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails.prototype.clearIsChatSponsor = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails.prototype.hasIsChatSponsor = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool is_chat_moderator = 7;
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails.prototype.getIsChatModerator = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.youtube.api.v3.LiveChatMessageAuthorDetails} returns this
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails.prototype.setIsChatModerator = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessageAuthorDetails} returns this
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails.prototype.clearIsChatModerator = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageAuthorDetails.prototype.hasIsChatModerator = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.youtube.api.v3.LiveChatMessageSnippet.oneofGroups_ = [[19,20,21,22,27,28,29,30,31,32,33]];

/**
 * @enum {number}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.DisplayedContentCase = {
  DISPLAYED_CONTENT_NOT_SET: 0,
  TEXT_MESSAGE_DETAILS: 19,
  MESSAGE_DELETED_DETAILS: 20,
  MESSAGE_RETRACTED_DETAILS: 21,
  USER_BANNED_DETAILS: 22,
  SUPER_CHAT_DETAILS: 27,
  SUPER_STICKER_DETAILS: 28,
  NEW_SPONSOR_DETAILS: 29,
  MEMBER_MILESTONE_CHAT_DETAILS: 30,
  MEMBERSHIP_GIFTING_DETAILS: 31,
  GIFT_MEMBERSHIP_RECEIVED_DETAILS: 32,
  POLL_DETAILS: 33
};

/**
 * @return {proto.youtube.api.v3.LiveChatMessageSnippet.DisplayedContentCase}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.getDisplayedContentCase = function() {
  return /** @type {proto.youtube.api.v3.LiveChatMessageSnippet.DisplayedContentCase} */(jspb.Message.computeOneofCase(this, proto.youtube.api.v3.LiveChatMessageSnippet.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.toObject = function(opt_includeInstance) {
  return proto.youtube.api.v3.LiveChatMessageSnippet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.youtube.api.v3.LiveChatMessageSnippet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatMessageSnippet.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    liveChatId: (f = jspb.Message.getField(msg, 201)) == null ? undefined : f,
    authorChannelId: (f = jspb.Message.getField(msg, 301)) == null ? undefined : f,
    publishedAt: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    hasDisplayContent: (f = jspb.Message.getBooleanField(msg, 17)) == null ? undefined : f,
    displayMessage: (f = jspb.Message.getField(msg, 16)) == null ? undefined : f,
    textMessageDetails: (f = msg.getTextMessageDetails()) && proto.youtube.api.v3.LiveChatTextMessageDetails.toObject(includeInstance, f),
    messageDeletedDetails: (f = msg.getMessageDeletedDetails()) && proto.youtube.api.v3.LiveChatMessageDeletedDetails.toObject(includeInstance, f),
    messageRetractedDetails: (f = msg.getMessageRetractedDetails()) && proto.youtube.api.v3.LiveChatMessageRetractedDetails.toObject(includeInstance, f),
    userBannedDetails: (f = msg.getUserBannedDetails()) && proto.youtube.api.v3.LiveChatUserBannedMessageDetails.toObject(includeInstance, f),
    superChatDetails: (f = msg.getSuperChatDetails()) && proto.youtube.api.v3.LiveChatSuperChatDetails.toObject(includeInstance, f),
    superStickerDetails: (f = msg.getSuperStickerDetails()) && proto.youtube.api.v3.LiveChatSuperStickerDetails.toObject(includeInstance, f),
    newSponsorDetails: (f = msg.getNewSponsorDetails()) && proto.youtube.api.v3.LiveChatNewSponsorDetails.toObject(includeInstance, f),
    memberMilestoneChatDetails: (f = msg.getMemberMilestoneChatDetails()) && proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails.toObject(includeInstance, f),
    membershipGiftingDetails: (f = msg.getMembershipGiftingDetails()) && proto.youtube.api.v3.LiveChatMembershipGiftingDetails.toObject(includeInstance, f),
    giftMembershipReceivedDetails: (f = msg.getGiftMembershipReceivedDetails()) && proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails.toObject(includeInstance, f),
    pollDetails: (f = msg.getPollDetails()) && proto.youtube.api.v3.LiveChatPollDetails.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.youtube.api.v3.LiveChatMessageSnippet;
  return proto.youtube.api.v3.LiveChatMessageSnippet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.youtube.api.v3.LiveChatMessageSnippet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.youtube.api.v3.LiveChatMessageSnippet.TypeWrapper.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 201:
      var value = /** @type {string} */ (reader.readString());
      msg.setLiveChatId(value);
      break;
    case 301:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthorChannelId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublishedAt(value);
      break;
    case 17:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasDisplayContent(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayMessage(value);
      break;
    case 19:
      var value = new proto.youtube.api.v3.LiveChatTextMessageDetails;
      reader.readMessage(value,proto.youtube.api.v3.LiveChatTextMessageDetails.deserializeBinaryFromReader);
      msg.setTextMessageDetails(value);
      break;
    case 20:
      var value = new proto.youtube.api.v3.LiveChatMessageDeletedDetails;
      reader.readMessage(value,proto.youtube.api.v3.LiveChatMessageDeletedDetails.deserializeBinaryFromReader);
      msg.setMessageDeletedDetails(value);
      break;
    case 21:
      var value = new proto.youtube.api.v3.LiveChatMessageRetractedDetails;
      reader.readMessage(value,proto.youtube.api.v3.LiveChatMessageRetractedDetails.deserializeBinaryFromReader);
      msg.setMessageRetractedDetails(value);
      break;
    case 22:
      var value = new proto.youtube.api.v3.LiveChatUserBannedMessageDetails;
      reader.readMessage(value,proto.youtube.api.v3.LiveChatUserBannedMessageDetails.deserializeBinaryFromReader);
      msg.setUserBannedDetails(value);
      break;
    case 27:
      var value = new proto.youtube.api.v3.LiveChatSuperChatDetails;
      reader.readMessage(value,proto.youtube.api.v3.LiveChatSuperChatDetails.deserializeBinaryFromReader);
      msg.setSuperChatDetails(value);
      break;
    case 28:
      var value = new proto.youtube.api.v3.LiveChatSuperStickerDetails;
      reader.readMessage(value,proto.youtube.api.v3.LiveChatSuperStickerDetails.deserializeBinaryFromReader);
      msg.setSuperStickerDetails(value);
      break;
    case 29:
      var value = new proto.youtube.api.v3.LiveChatNewSponsorDetails;
      reader.readMessage(value,proto.youtube.api.v3.LiveChatNewSponsorDetails.deserializeBinaryFromReader);
      msg.setNewSponsorDetails(value);
      break;
    case 30:
      var value = new proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails;
      reader.readMessage(value,proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails.deserializeBinaryFromReader);
      msg.setMemberMilestoneChatDetails(value);
      break;
    case 31:
      var value = new proto.youtube.api.v3.LiveChatMembershipGiftingDetails;
      reader.readMessage(value,proto.youtube.api.v3.LiveChatMembershipGiftingDetails.deserializeBinaryFromReader);
      msg.setMembershipGiftingDetails(value);
      break;
    case 32:
      var value = new proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails;
      reader.readMessage(value,proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails.deserializeBinaryFromReader);
      msg.setGiftMembershipReceivedDetails(value);
      break;
    case 33:
      var value = new proto.youtube.api.v3.LiveChatPollDetails;
      reader.readMessage(value,proto.youtube.api.v3.LiveChatPollDetails.deserializeBinaryFromReader);
      msg.setPollDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.youtube.api.v3.LiveChatMessageSnippet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.youtube.api.v3.LiveChatMessageSnippet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatMessageSnippet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.youtube.api.v3.LiveChatMessageSnippet.TypeWrapper.Type} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 201));
  if (f != null) {
    writer.writeString(
      201,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 301));
  if (f != null) {
    writer.writeString(
      301,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeBool(
      17,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getTextMessageDetails();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.youtube.api.v3.LiveChatTextMessageDetails.serializeBinaryToWriter
    );
  }
  f = message.getMessageDeletedDetails();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.youtube.api.v3.LiveChatMessageDeletedDetails.serializeBinaryToWriter
    );
  }
  f = message.getMessageRetractedDetails();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.youtube.api.v3.LiveChatMessageRetractedDetails.serializeBinaryToWriter
    );
  }
  f = message.getUserBannedDetails();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.youtube.api.v3.LiveChatUserBannedMessageDetails.serializeBinaryToWriter
    );
  }
  f = message.getSuperChatDetails();
  if (f != null) {
    writer.writeMessage(
      27,
      f,
      proto.youtube.api.v3.LiveChatSuperChatDetails.serializeBinaryToWriter
    );
  }
  f = message.getSuperStickerDetails();
  if (f != null) {
    writer.writeMessage(
      28,
      f,
      proto.youtube.api.v3.LiveChatSuperStickerDetails.serializeBinaryToWriter
    );
  }
  f = message.getNewSponsorDetails();
  if (f != null) {
    writer.writeMessage(
      29,
      f,
      proto.youtube.api.v3.LiveChatNewSponsorDetails.serializeBinaryToWriter
    );
  }
  f = message.getMemberMilestoneChatDetails();
  if (f != null) {
    writer.writeMessage(
      30,
      f,
      proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails.serializeBinaryToWriter
    );
  }
  f = message.getMembershipGiftingDetails();
  if (f != null) {
    writer.writeMessage(
      31,
      f,
      proto.youtube.api.v3.LiveChatMembershipGiftingDetails.serializeBinaryToWriter
    );
  }
  f = message.getGiftMembershipReceivedDetails();
  if (f != null) {
    writer.writeMessage(
      32,
      f,
      proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails.serializeBinaryToWriter
    );
  }
  f = message.getPollDetails();
  if (f != null) {
    writer.writeMessage(
      33,
      f,
      proto.youtube.api.v3.LiveChatPollDetails.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.TypeWrapper.prototype.toObject = function(opt_includeInstance) {
  return proto.youtube.api.v3.LiveChatMessageSnippet.TypeWrapper.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.youtube.api.v3.LiveChatMessageSnippet.TypeWrapper} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatMessageSnippet.TypeWrapper.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet.TypeWrapper}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.TypeWrapper.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.youtube.api.v3.LiveChatMessageSnippet.TypeWrapper;
  return proto.youtube.api.v3.LiveChatMessageSnippet.TypeWrapper.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.youtube.api.v3.LiveChatMessageSnippet.TypeWrapper} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet.TypeWrapper}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.TypeWrapper.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.TypeWrapper.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.youtube.api.v3.LiveChatMessageSnippet.TypeWrapper.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.youtube.api.v3.LiveChatMessageSnippet.TypeWrapper} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatMessageSnippet.TypeWrapper.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.TypeWrapper.Type = {
  INVALID_TYPE: 0,
  TEXT_MESSAGE_EVENT: 1,
  TOMBSTONE: 2,
  FAN_FUNDING_EVENT: 3,
  CHAT_ENDED_EVENT: 4,
  SPONSOR_ONLY_MODE_STARTED_EVENT: 5,
  SPONSOR_ONLY_MODE_ENDED_EVENT: 6,
  NEW_SPONSOR_EVENT: 7,
  MEMBER_MILESTONE_CHAT_EVENT: 17,
  MEMBERSHIP_GIFTING_EVENT: 18,
  GIFT_MEMBERSHIP_RECEIVED_EVENT: 19,
  MESSAGE_DELETED_EVENT: 8,
  MESSAGE_RETRACTED_EVENT: 9,
  USER_BANNED_EVENT: 10,
  SUPER_CHAT_EVENT: 15,
  SUPER_STICKER_EVENT: 16,
  POLL_EVENT: 20
};

/**
 * optional TypeWrapper.Type type = 1;
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet.TypeWrapper.Type}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.getType = function() {
  return /** @type {!proto.youtube.api.v3.LiveChatMessageSnippet.TypeWrapper.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.youtube.api.v3.LiveChatMessageSnippet.TypeWrapper.Type} value
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet} returns this
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.setType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet} returns this
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.clearType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string live_chat_id = 201;
 * @return {string}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.getLiveChatId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 201, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet} returns this
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.setLiveChatId = function(value) {
  return jspb.Message.setField(this, 201, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet} returns this
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.clearLiveChatId = function() {
  return jspb.Message.setField(this, 201, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.hasLiveChatId = function() {
  return jspb.Message.getField(this, 201) != null;
};


/**
 * optional string author_channel_id = 301;
 * @return {string}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.getAuthorChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 301, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet} returns this
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.setAuthorChannelId = function(value) {
  return jspb.Message.setField(this, 301, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet} returns this
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.clearAuthorChannelId = function() {
  return jspb.Message.setField(this, 301, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.hasAuthorChannelId = function() {
  return jspb.Message.getField(this, 301) != null;
};


/**
 * optional string published_at = 4;
 * @return {string}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.getPublishedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet} returns this
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.setPublishedAt = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet} returns this
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.clearPublishedAt = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.hasPublishedAt = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool has_display_content = 17;
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.getHasDisplayContent = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 17, false));
};


/**
 * @param {boolean} value
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet} returns this
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.setHasDisplayContent = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet} returns this
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.clearHasDisplayContent = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.hasHasDisplayContent = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional string display_message = 16;
 * @return {string}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.getDisplayMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet} returns this
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.setDisplayMessage = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet} returns this
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.clearDisplayMessage = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.hasDisplayMessage = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional LiveChatTextMessageDetails text_message_details = 19;
 * @return {?proto.youtube.api.v3.LiveChatTextMessageDetails}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.getTextMessageDetails = function() {
  return /** @type{?proto.youtube.api.v3.LiveChatTextMessageDetails} */ (
    jspb.Message.getWrapperField(this, proto.youtube.api.v3.LiveChatTextMessageDetails, 19));
};


/**
 * @param {?proto.youtube.api.v3.LiveChatTextMessageDetails|undefined} value
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet} returns this
*/
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.setTextMessageDetails = function(value) {
  return jspb.Message.setOneofWrapperField(this, 19, proto.youtube.api.v3.LiveChatMessageSnippet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet} returns this
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.clearTextMessageDetails = function() {
  return this.setTextMessageDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.hasTextMessageDetails = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional LiveChatMessageDeletedDetails message_deleted_details = 20;
 * @return {?proto.youtube.api.v3.LiveChatMessageDeletedDetails}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.getMessageDeletedDetails = function() {
  return /** @type{?proto.youtube.api.v3.LiveChatMessageDeletedDetails} */ (
    jspb.Message.getWrapperField(this, proto.youtube.api.v3.LiveChatMessageDeletedDetails, 20));
};


/**
 * @param {?proto.youtube.api.v3.LiveChatMessageDeletedDetails|undefined} value
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet} returns this
*/
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.setMessageDeletedDetails = function(value) {
  return jspb.Message.setOneofWrapperField(this, 20, proto.youtube.api.v3.LiveChatMessageSnippet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet} returns this
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.clearMessageDeletedDetails = function() {
  return this.setMessageDeletedDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.hasMessageDeletedDetails = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional LiveChatMessageRetractedDetails message_retracted_details = 21;
 * @return {?proto.youtube.api.v3.LiveChatMessageRetractedDetails}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.getMessageRetractedDetails = function() {
  return /** @type{?proto.youtube.api.v3.LiveChatMessageRetractedDetails} */ (
    jspb.Message.getWrapperField(this, proto.youtube.api.v3.LiveChatMessageRetractedDetails, 21));
};


/**
 * @param {?proto.youtube.api.v3.LiveChatMessageRetractedDetails|undefined} value
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet} returns this
*/
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.setMessageRetractedDetails = function(value) {
  return jspb.Message.setOneofWrapperField(this, 21, proto.youtube.api.v3.LiveChatMessageSnippet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet} returns this
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.clearMessageRetractedDetails = function() {
  return this.setMessageRetractedDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.hasMessageRetractedDetails = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional LiveChatUserBannedMessageDetails user_banned_details = 22;
 * @return {?proto.youtube.api.v3.LiveChatUserBannedMessageDetails}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.getUserBannedDetails = function() {
  return /** @type{?proto.youtube.api.v3.LiveChatUserBannedMessageDetails} */ (
    jspb.Message.getWrapperField(this, proto.youtube.api.v3.LiveChatUserBannedMessageDetails, 22));
};


/**
 * @param {?proto.youtube.api.v3.LiveChatUserBannedMessageDetails|undefined} value
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet} returns this
*/
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.setUserBannedDetails = function(value) {
  return jspb.Message.setOneofWrapperField(this, 22, proto.youtube.api.v3.LiveChatMessageSnippet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet} returns this
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.clearUserBannedDetails = function() {
  return this.setUserBannedDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.hasUserBannedDetails = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional LiveChatSuperChatDetails super_chat_details = 27;
 * @return {?proto.youtube.api.v3.LiveChatSuperChatDetails}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.getSuperChatDetails = function() {
  return /** @type{?proto.youtube.api.v3.LiveChatSuperChatDetails} */ (
    jspb.Message.getWrapperField(this, proto.youtube.api.v3.LiveChatSuperChatDetails, 27));
};


/**
 * @param {?proto.youtube.api.v3.LiveChatSuperChatDetails|undefined} value
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet} returns this
*/
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.setSuperChatDetails = function(value) {
  return jspb.Message.setOneofWrapperField(this, 27, proto.youtube.api.v3.LiveChatMessageSnippet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet} returns this
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.clearSuperChatDetails = function() {
  return this.setSuperChatDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.hasSuperChatDetails = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional LiveChatSuperStickerDetails super_sticker_details = 28;
 * @return {?proto.youtube.api.v3.LiveChatSuperStickerDetails}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.getSuperStickerDetails = function() {
  return /** @type{?proto.youtube.api.v3.LiveChatSuperStickerDetails} */ (
    jspb.Message.getWrapperField(this, proto.youtube.api.v3.LiveChatSuperStickerDetails, 28));
};


/**
 * @param {?proto.youtube.api.v3.LiveChatSuperStickerDetails|undefined} value
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet} returns this
*/
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.setSuperStickerDetails = function(value) {
  return jspb.Message.setOneofWrapperField(this, 28, proto.youtube.api.v3.LiveChatMessageSnippet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet} returns this
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.clearSuperStickerDetails = function() {
  return this.setSuperStickerDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.hasSuperStickerDetails = function() {
  return jspb.Message.getField(this, 28) != null;
};


/**
 * optional LiveChatNewSponsorDetails new_sponsor_details = 29;
 * @return {?proto.youtube.api.v3.LiveChatNewSponsorDetails}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.getNewSponsorDetails = function() {
  return /** @type{?proto.youtube.api.v3.LiveChatNewSponsorDetails} */ (
    jspb.Message.getWrapperField(this, proto.youtube.api.v3.LiveChatNewSponsorDetails, 29));
};


/**
 * @param {?proto.youtube.api.v3.LiveChatNewSponsorDetails|undefined} value
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet} returns this
*/
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.setNewSponsorDetails = function(value) {
  return jspb.Message.setOneofWrapperField(this, 29, proto.youtube.api.v3.LiveChatMessageSnippet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet} returns this
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.clearNewSponsorDetails = function() {
  return this.setNewSponsorDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.hasNewSponsorDetails = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * optional LiveChatMemberMilestoneChatDetails member_milestone_chat_details = 30;
 * @return {?proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.getMemberMilestoneChatDetails = function() {
  return /** @type{?proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails} */ (
    jspb.Message.getWrapperField(this, proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails, 30));
};


/**
 * @param {?proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails|undefined} value
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet} returns this
*/
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.setMemberMilestoneChatDetails = function(value) {
  return jspb.Message.setOneofWrapperField(this, 30, proto.youtube.api.v3.LiveChatMessageSnippet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet} returns this
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.clearMemberMilestoneChatDetails = function() {
  return this.setMemberMilestoneChatDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.hasMemberMilestoneChatDetails = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional LiveChatMembershipGiftingDetails membership_gifting_details = 31;
 * @return {?proto.youtube.api.v3.LiveChatMembershipGiftingDetails}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.getMembershipGiftingDetails = function() {
  return /** @type{?proto.youtube.api.v3.LiveChatMembershipGiftingDetails} */ (
    jspb.Message.getWrapperField(this, proto.youtube.api.v3.LiveChatMembershipGiftingDetails, 31));
};


/**
 * @param {?proto.youtube.api.v3.LiveChatMembershipGiftingDetails|undefined} value
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet} returns this
*/
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.setMembershipGiftingDetails = function(value) {
  return jspb.Message.setOneofWrapperField(this, 31, proto.youtube.api.v3.LiveChatMessageSnippet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet} returns this
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.clearMembershipGiftingDetails = function() {
  return this.setMembershipGiftingDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.hasMembershipGiftingDetails = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * optional LiveChatGiftMembershipReceivedDetails gift_membership_received_details = 32;
 * @return {?proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.getGiftMembershipReceivedDetails = function() {
  return /** @type{?proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails} */ (
    jspb.Message.getWrapperField(this, proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails, 32));
};


/**
 * @param {?proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails|undefined} value
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet} returns this
*/
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.setGiftMembershipReceivedDetails = function(value) {
  return jspb.Message.setOneofWrapperField(this, 32, proto.youtube.api.v3.LiveChatMessageSnippet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet} returns this
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.clearGiftMembershipReceivedDetails = function() {
  return this.setGiftMembershipReceivedDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.hasGiftMembershipReceivedDetails = function() {
  return jspb.Message.getField(this, 32) != null;
};


/**
 * optional LiveChatPollDetails poll_details = 33;
 * @return {?proto.youtube.api.v3.LiveChatPollDetails}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.getPollDetails = function() {
  return /** @type{?proto.youtube.api.v3.LiveChatPollDetails} */ (
    jspb.Message.getWrapperField(this, proto.youtube.api.v3.LiveChatPollDetails, 33));
};


/**
 * @param {?proto.youtube.api.v3.LiveChatPollDetails|undefined} value
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet} returns this
*/
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.setPollDetails = function(value) {
  return jspb.Message.setOneofWrapperField(this, 33, proto.youtube.api.v3.LiveChatMessageSnippet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessageSnippet} returns this
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.clearPollDetails = function() {
  return this.setPollDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageSnippet.prototype.hasPollDetails = function() {
  return jspb.Message.getField(this, 33) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.youtube.api.v3.LiveChatTextMessageDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.youtube.api.v3.LiveChatTextMessageDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.youtube.api.v3.LiveChatTextMessageDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatTextMessageDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageText: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.youtube.api.v3.LiveChatTextMessageDetails}
 */
proto.youtube.api.v3.LiveChatTextMessageDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.youtube.api.v3.LiveChatTextMessageDetails;
  return proto.youtube.api.v3.LiveChatTextMessageDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.youtube.api.v3.LiveChatTextMessageDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.youtube.api.v3.LiveChatTextMessageDetails}
 */
proto.youtube.api.v3.LiveChatTextMessageDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.youtube.api.v3.LiveChatTextMessageDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.youtube.api.v3.LiveChatTextMessageDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.youtube.api.v3.LiveChatTextMessageDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatTextMessageDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message_text = 1;
 * @return {string}
 */
proto.youtube.api.v3.LiveChatTextMessageDetails.prototype.getMessageText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.LiveChatTextMessageDetails} returns this
 */
proto.youtube.api.v3.LiveChatTextMessageDetails.prototype.setMessageText = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatTextMessageDetails} returns this
 */
proto.youtube.api.v3.LiveChatTextMessageDetails.prototype.clearMessageText = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatTextMessageDetails.prototype.hasMessageText = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.youtube.api.v3.LiveChatMessageDeletedDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.youtube.api.v3.LiveChatMessageDeletedDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.youtube.api.v3.LiveChatMessageDeletedDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatMessageDeletedDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    deletedMessageId: (f = jspb.Message.getField(msg, 101)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.youtube.api.v3.LiveChatMessageDeletedDetails}
 */
proto.youtube.api.v3.LiveChatMessageDeletedDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.youtube.api.v3.LiveChatMessageDeletedDetails;
  return proto.youtube.api.v3.LiveChatMessageDeletedDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.youtube.api.v3.LiveChatMessageDeletedDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.youtube.api.v3.LiveChatMessageDeletedDetails}
 */
proto.youtube.api.v3.LiveChatMessageDeletedDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 101:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeletedMessageId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.youtube.api.v3.LiveChatMessageDeletedDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.youtube.api.v3.LiveChatMessageDeletedDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.youtube.api.v3.LiveChatMessageDeletedDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatMessageDeletedDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 101));
  if (f != null) {
    writer.writeString(
      101,
      f
    );
  }
};


/**
 * optional string deleted_message_id = 101;
 * @return {string}
 */
proto.youtube.api.v3.LiveChatMessageDeletedDetails.prototype.getDeletedMessageId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 101, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.LiveChatMessageDeletedDetails} returns this
 */
proto.youtube.api.v3.LiveChatMessageDeletedDetails.prototype.setDeletedMessageId = function(value) {
  return jspb.Message.setField(this, 101, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessageDeletedDetails} returns this
 */
proto.youtube.api.v3.LiveChatMessageDeletedDetails.prototype.clearDeletedMessageId = function() {
  return jspb.Message.setField(this, 101, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageDeletedDetails.prototype.hasDeletedMessageId = function() {
  return jspb.Message.getField(this, 101) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.youtube.api.v3.LiveChatMessageRetractedDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.youtube.api.v3.LiveChatMessageRetractedDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.youtube.api.v3.LiveChatMessageRetractedDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatMessageRetractedDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    retractedMessageId: (f = jspb.Message.getField(msg, 201)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.youtube.api.v3.LiveChatMessageRetractedDetails}
 */
proto.youtube.api.v3.LiveChatMessageRetractedDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.youtube.api.v3.LiveChatMessageRetractedDetails;
  return proto.youtube.api.v3.LiveChatMessageRetractedDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.youtube.api.v3.LiveChatMessageRetractedDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.youtube.api.v3.LiveChatMessageRetractedDetails}
 */
proto.youtube.api.v3.LiveChatMessageRetractedDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 201:
      var value = /** @type {string} */ (reader.readString());
      msg.setRetractedMessageId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.youtube.api.v3.LiveChatMessageRetractedDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.youtube.api.v3.LiveChatMessageRetractedDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.youtube.api.v3.LiveChatMessageRetractedDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatMessageRetractedDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 201));
  if (f != null) {
    writer.writeString(
      201,
      f
    );
  }
};


/**
 * optional string retracted_message_id = 201;
 * @return {string}
 */
proto.youtube.api.v3.LiveChatMessageRetractedDetails.prototype.getRetractedMessageId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 201, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.LiveChatMessageRetractedDetails} returns this
 */
proto.youtube.api.v3.LiveChatMessageRetractedDetails.prototype.setRetractedMessageId = function(value) {
  return jspb.Message.setField(this, 201, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMessageRetractedDetails} returns this
 */
proto.youtube.api.v3.LiveChatMessageRetractedDetails.prototype.clearRetractedMessageId = function() {
  return jspb.Message.setField(this, 201, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMessageRetractedDetails.prototype.hasRetractedMessageId = function() {
  return jspb.Message.getField(this, 201) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.youtube.api.v3.LiveChatUserBannedMessageDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.youtube.api.v3.LiveChatUserBannedMessageDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.youtube.api.v3.LiveChatUserBannedMessageDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatUserBannedMessageDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    bannedUserDetails: (f = msg.getBannedUserDetails()) && proto.youtube.api.v3.ChannelProfileDetails.toObject(includeInstance, f),
    banType: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    banDurationSeconds: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.youtube.api.v3.LiveChatUserBannedMessageDetails}
 */
proto.youtube.api.v3.LiveChatUserBannedMessageDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.youtube.api.v3.LiveChatUserBannedMessageDetails;
  return proto.youtube.api.v3.LiveChatUserBannedMessageDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.youtube.api.v3.LiveChatUserBannedMessageDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.youtube.api.v3.LiveChatUserBannedMessageDetails}
 */
proto.youtube.api.v3.LiveChatUserBannedMessageDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.youtube.api.v3.ChannelProfileDetails;
      reader.readMessage(value,proto.youtube.api.v3.ChannelProfileDetails.deserializeBinaryFromReader);
      msg.setBannedUserDetails(value);
      break;
    case 2:
      var value = /** @type {!proto.youtube.api.v3.LiveChatUserBannedMessageDetails.BanTypeWrapper.BanType} */ (reader.readEnum());
      msg.setBanType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBanDurationSeconds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.youtube.api.v3.LiveChatUserBannedMessageDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.youtube.api.v3.LiveChatUserBannedMessageDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.youtube.api.v3.LiveChatUserBannedMessageDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatUserBannedMessageDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBannedUserDetails();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.youtube.api.v3.ChannelProfileDetails.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.youtube.api.v3.LiveChatUserBannedMessageDetails.BanTypeWrapper.BanType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.youtube.api.v3.LiveChatUserBannedMessageDetails.BanTypeWrapper.prototype.toObject = function(opt_includeInstance) {
  return proto.youtube.api.v3.LiveChatUserBannedMessageDetails.BanTypeWrapper.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.youtube.api.v3.LiveChatUserBannedMessageDetails.BanTypeWrapper} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatUserBannedMessageDetails.BanTypeWrapper.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.youtube.api.v3.LiveChatUserBannedMessageDetails.BanTypeWrapper}
 */
proto.youtube.api.v3.LiveChatUserBannedMessageDetails.BanTypeWrapper.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.youtube.api.v3.LiveChatUserBannedMessageDetails.BanTypeWrapper;
  return proto.youtube.api.v3.LiveChatUserBannedMessageDetails.BanTypeWrapper.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.youtube.api.v3.LiveChatUserBannedMessageDetails.BanTypeWrapper} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.youtube.api.v3.LiveChatUserBannedMessageDetails.BanTypeWrapper}
 */
proto.youtube.api.v3.LiveChatUserBannedMessageDetails.BanTypeWrapper.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.youtube.api.v3.LiveChatUserBannedMessageDetails.BanTypeWrapper.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.youtube.api.v3.LiveChatUserBannedMessageDetails.BanTypeWrapper.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.youtube.api.v3.LiveChatUserBannedMessageDetails.BanTypeWrapper} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatUserBannedMessageDetails.BanTypeWrapper.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.youtube.api.v3.LiveChatUserBannedMessageDetails.BanTypeWrapper.BanType = {
  PERMANENT: 1,
  TEMPORARY: 2
};

/**
 * optional ChannelProfileDetails banned_user_details = 1;
 * @return {?proto.youtube.api.v3.ChannelProfileDetails}
 */
proto.youtube.api.v3.LiveChatUserBannedMessageDetails.prototype.getBannedUserDetails = function() {
  return /** @type{?proto.youtube.api.v3.ChannelProfileDetails} */ (
    jspb.Message.getWrapperField(this, proto.youtube.api.v3.ChannelProfileDetails, 1));
};


/**
 * @param {?proto.youtube.api.v3.ChannelProfileDetails|undefined} value
 * @return {!proto.youtube.api.v3.LiveChatUserBannedMessageDetails} returns this
*/
proto.youtube.api.v3.LiveChatUserBannedMessageDetails.prototype.setBannedUserDetails = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatUserBannedMessageDetails} returns this
 */
proto.youtube.api.v3.LiveChatUserBannedMessageDetails.prototype.clearBannedUserDetails = function() {
  return this.setBannedUserDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatUserBannedMessageDetails.prototype.hasBannedUserDetails = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BanTypeWrapper.BanType ban_type = 2;
 * @return {!proto.youtube.api.v3.LiveChatUserBannedMessageDetails.BanTypeWrapper.BanType}
 */
proto.youtube.api.v3.LiveChatUserBannedMessageDetails.prototype.getBanType = function() {
  return /** @type {!proto.youtube.api.v3.LiveChatUserBannedMessageDetails.BanTypeWrapper.BanType} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/**
 * @param {!proto.youtube.api.v3.LiveChatUserBannedMessageDetails.BanTypeWrapper.BanType} value
 * @return {!proto.youtube.api.v3.LiveChatUserBannedMessageDetails} returns this
 */
proto.youtube.api.v3.LiveChatUserBannedMessageDetails.prototype.setBanType = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatUserBannedMessageDetails} returns this
 */
proto.youtube.api.v3.LiveChatUserBannedMessageDetails.prototype.clearBanType = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatUserBannedMessageDetails.prototype.hasBanType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 ban_duration_seconds = 4;
 * @return {number}
 */
proto.youtube.api.v3.LiveChatUserBannedMessageDetails.prototype.getBanDurationSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.youtube.api.v3.LiveChatUserBannedMessageDetails} returns this
 */
proto.youtube.api.v3.LiveChatUserBannedMessageDetails.prototype.setBanDurationSeconds = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatUserBannedMessageDetails} returns this
 */
proto.youtube.api.v3.LiveChatUserBannedMessageDetails.prototype.clearBanDurationSeconds = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatUserBannedMessageDetails.prototype.hasBanDurationSeconds = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.youtube.api.v3.LiveChatSuperChatDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.youtube.api.v3.LiveChatSuperChatDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.youtube.api.v3.LiveChatSuperChatDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatSuperChatDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    amountMicros: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    currency: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    amountDisplayString: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    userComment: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    tier: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.youtube.api.v3.LiveChatSuperChatDetails}
 */
proto.youtube.api.v3.LiveChatSuperChatDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.youtube.api.v3.LiveChatSuperChatDetails;
  return proto.youtube.api.v3.LiveChatSuperChatDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.youtube.api.v3.LiveChatSuperChatDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.youtube.api.v3.LiveChatSuperChatDetails}
 */
proto.youtube.api.v3.LiveChatSuperChatDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmountMicros(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmountDisplayString(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserComment(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.youtube.api.v3.LiveChatSuperChatDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.youtube.api.v3.LiveChatSuperChatDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.youtube.api.v3.LiveChatSuperChatDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatSuperChatDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional uint64 amount_micros = 1;
 * @return {number}
 */
proto.youtube.api.v3.LiveChatSuperChatDetails.prototype.getAmountMicros = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.youtube.api.v3.LiveChatSuperChatDetails} returns this
 */
proto.youtube.api.v3.LiveChatSuperChatDetails.prototype.setAmountMicros = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatSuperChatDetails} returns this
 */
proto.youtube.api.v3.LiveChatSuperChatDetails.prototype.clearAmountMicros = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatSuperChatDetails.prototype.hasAmountMicros = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string currency = 2;
 * @return {string}
 */
proto.youtube.api.v3.LiveChatSuperChatDetails.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.LiveChatSuperChatDetails} returns this
 */
proto.youtube.api.v3.LiveChatSuperChatDetails.prototype.setCurrency = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatSuperChatDetails} returns this
 */
proto.youtube.api.v3.LiveChatSuperChatDetails.prototype.clearCurrency = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatSuperChatDetails.prototype.hasCurrency = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string amount_display_string = 3;
 * @return {string}
 */
proto.youtube.api.v3.LiveChatSuperChatDetails.prototype.getAmountDisplayString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.LiveChatSuperChatDetails} returns this
 */
proto.youtube.api.v3.LiveChatSuperChatDetails.prototype.setAmountDisplayString = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatSuperChatDetails} returns this
 */
proto.youtube.api.v3.LiveChatSuperChatDetails.prototype.clearAmountDisplayString = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatSuperChatDetails.prototype.hasAmountDisplayString = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string user_comment = 4;
 * @return {string}
 */
proto.youtube.api.v3.LiveChatSuperChatDetails.prototype.getUserComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.LiveChatSuperChatDetails} returns this
 */
proto.youtube.api.v3.LiveChatSuperChatDetails.prototype.setUserComment = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatSuperChatDetails} returns this
 */
proto.youtube.api.v3.LiveChatSuperChatDetails.prototype.clearUserComment = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatSuperChatDetails.prototype.hasUserComment = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 tier = 5;
 * @return {number}
 */
proto.youtube.api.v3.LiveChatSuperChatDetails.prototype.getTier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.youtube.api.v3.LiveChatSuperChatDetails} returns this
 */
proto.youtube.api.v3.LiveChatSuperChatDetails.prototype.setTier = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatSuperChatDetails} returns this
 */
proto.youtube.api.v3.LiveChatSuperChatDetails.prototype.clearTier = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatSuperChatDetails.prototype.hasTier = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.youtube.api.v3.LiveChatSuperStickerDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.youtube.api.v3.LiveChatSuperStickerDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.youtube.api.v3.LiveChatSuperStickerDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatSuperStickerDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    amountMicros: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    currency: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    amountDisplayString: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    tier: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    superStickerMetadata: (f = msg.getSuperStickerMetadata()) && proto.youtube.api.v3.SuperStickerMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.youtube.api.v3.LiveChatSuperStickerDetails}
 */
proto.youtube.api.v3.LiveChatSuperStickerDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.youtube.api.v3.LiveChatSuperStickerDetails;
  return proto.youtube.api.v3.LiveChatSuperStickerDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.youtube.api.v3.LiveChatSuperStickerDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.youtube.api.v3.LiveChatSuperStickerDetails}
 */
proto.youtube.api.v3.LiveChatSuperStickerDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmountMicros(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmountDisplayString(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTier(value);
      break;
    case 5:
      var value = new proto.youtube.api.v3.SuperStickerMetadata;
      reader.readMessage(value,proto.youtube.api.v3.SuperStickerMetadata.deserializeBinaryFromReader);
      msg.setSuperStickerMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.youtube.api.v3.LiveChatSuperStickerDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.youtube.api.v3.LiveChatSuperStickerDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.youtube.api.v3.LiveChatSuperStickerDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatSuperStickerDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getSuperStickerMetadata();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.youtube.api.v3.SuperStickerMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 amount_micros = 1;
 * @return {number}
 */
proto.youtube.api.v3.LiveChatSuperStickerDetails.prototype.getAmountMicros = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.youtube.api.v3.LiveChatSuperStickerDetails} returns this
 */
proto.youtube.api.v3.LiveChatSuperStickerDetails.prototype.setAmountMicros = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatSuperStickerDetails} returns this
 */
proto.youtube.api.v3.LiveChatSuperStickerDetails.prototype.clearAmountMicros = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatSuperStickerDetails.prototype.hasAmountMicros = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string currency = 2;
 * @return {string}
 */
proto.youtube.api.v3.LiveChatSuperStickerDetails.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.LiveChatSuperStickerDetails} returns this
 */
proto.youtube.api.v3.LiveChatSuperStickerDetails.prototype.setCurrency = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatSuperStickerDetails} returns this
 */
proto.youtube.api.v3.LiveChatSuperStickerDetails.prototype.clearCurrency = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatSuperStickerDetails.prototype.hasCurrency = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string amount_display_string = 3;
 * @return {string}
 */
proto.youtube.api.v3.LiveChatSuperStickerDetails.prototype.getAmountDisplayString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.LiveChatSuperStickerDetails} returns this
 */
proto.youtube.api.v3.LiveChatSuperStickerDetails.prototype.setAmountDisplayString = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatSuperStickerDetails} returns this
 */
proto.youtube.api.v3.LiveChatSuperStickerDetails.prototype.clearAmountDisplayString = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatSuperStickerDetails.prototype.hasAmountDisplayString = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 tier = 4;
 * @return {number}
 */
proto.youtube.api.v3.LiveChatSuperStickerDetails.prototype.getTier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.youtube.api.v3.LiveChatSuperStickerDetails} returns this
 */
proto.youtube.api.v3.LiveChatSuperStickerDetails.prototype.setTier = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatSuperStickerDetails} returns this
 */
proto.youtube.api.v3.LiveChatSuperStickerDetails.prototype.clearTier = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatSuperStickerDetails.prototype.hasTier = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SuperStickerMetadata super_sticker_metadata = 5;
 * @return {?proto.youtube.api.v3.SuperStickerMetadata}
 */
proto.youtube.api.v3.LiveChatSuperStickerDetails.prototype.getSuperStickerMetadata = function() {
  return /** @type{?proto.youtube.api.v3.SuperStickerMetadata} */ (
    jspb.Message.getWrapperField(this, proto.youtube.api.v3.SuperStickerMetadata, 5));
};


/**
 * @param {?proto.youtube.api.v3.SuperStickerMetadata|undefined} value
 * @return {!proto.youtube.api.v3.LiveChatSuperStickerDetails} returns this
*/
proto.youtube.api.v3.LiveChatSuperStickerDetails.prototype.setSuperStickerMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatSuperStickerDetails} returns this
 */
proto.youtube.api.v3.LiveChatSuperStickerDetails.prototype.clearSuperStickerMetadata = function() {
  return this.setSuperStickerMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatSuperStickerDetails.prototype.hasSuperStickerMetadata = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.youtube.api.v3.LiveChatFanFundingEventDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.youtube.api.v3.LiveChatFanFundingEventDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.youtube.api.v3.LiveChatFanFundingEventDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatFanFundingEventDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    amountMicros: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    currency: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    amountDisplayString: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    userComment: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.youtube.api.v3.LiveChatFanFundingEventDetails}
 */
proto.youtube.api.v3.LiveChatFanFundingEventDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.youtube.api.v3.LiveChatFanFundingEventDetails;
  return proto.youtube.api.v3.LiveChatFanFundingEventDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.youtube.api.v3.LiveChatFanFundingEventDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.youtube.api.v3.LiveChatFanFundingEventDetails}
 */
proto.youtube.api.v3.LiveChatFanFundingEventDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmountMicros(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmountDisplayString(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserComment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.youtube.api.v3.LiveChatFanFundingEventDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.youtube.api.v3.LiveChatFanFundingEventDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.youtube.api.v3.LiveChatFanFundingEventDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatFanFundingEventDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint64 amount_micros = 1;
 * @return {number}
 */
proto.youtube.api.v3.LiveChatFanFundingEventDetails.prototype.getAmountMicros = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.youtube.api.v3.LiveChatFanFundingEventDetails} returns this
 */
proto.youtube.api.v3.LiveChatFanFundingEventDetails.prototype.setAmountMicros = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatFanFundingEventDetails} returns this
 */
proto.youtube.api.v3.LiveChatFanFundingEventDetails.prototype.clearAmountMicros = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatFanFundingEventDetails.prototype.hasAmountMicros = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string currency = 2;
 * @return {string}
 */
proto.youtube.api.v3.LiveChatFanFundingEventDetails.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.LiveChatFanFundingEventDetails} returns this
 */
proto.youtube.api.v3.LiveChatFanFundingEventDetails.prototype.setCurrency = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatFanFundingEventDetails} returns this
 */
proto.youtube.api.v3.LiveChatFanFundingEventDetails.prototype.clearCurrency = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatFanFundingEventDetails.prototype.hasCurrency = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string amount_display_string = 3;
 * @return {string}
 */
proto.youtube.api.v3.LiveChatFanFundingEventDetails.prototype.getAmountDisplayString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.LiveChatFanFundingEventDetails} returns this
 */
proto.youtube.api.v3.LiveChatFanFundingEventDetails.prototype.setAmountDisplayString = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatFanFundingEventDetails} returns this
 */
proto.youtube.api.v3.LiveChatFanFundingEventDetails.prototype.clearAmountDisplayString = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatFanFundingEventDetails.prototype.hasAmountDisplayString = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string user_comment = 4;
 * @return {string}
 */
proto.youtube.api.v3.LiveChatFanFundingEventDetails.prototype.getUserComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.LiveChatFanFundingEventDetails} returns this
 */
proto.youtube.api.v3.LiveChatFanFundingEventDetails.prototype.setUserComment = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatFanFundingEventDetails} returns this
 */
proto.youtube.api.v3.LiveChatFanFundingEventDetails.prototype.clearUserComment = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatFanFundingEventDetails.prototype.hasUserComment = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.youtube.api.v3.LiveChatNewSponsorDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.youtube.api.v3.LiveChatNewSponsorDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.youtube.api.v3.LiveChatNewSponsorDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatNewSponsorDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    memberLevelName: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    isUpgrade: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.youtube.api.v3.LiveChatNewSponsorDetails}
 */
proto.youtube.api.v3.LiveChatNewSponsorDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.youtube.api.v3.LiveChatNewSponsorDetails;
  return proto.youtube.api.v3.LiveChatNewSponsorDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.youtube.api.v3.LiveChatNewSponsorDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.youtube.api.v3.LiveChatNewSponsorDetails}
 */
proto.youtube.api.v3.LiveChatNewSponsorDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemberLevelName(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsUpgrade(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.youtube.api.v3.LiveChatNewSponsorDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.youtube.api.v3.LiveChatNewSponsorDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.youtube.api.v3.LiveChatNewSponsorDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatNewSponsorDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string member_level_name = 1;
 * @return {string}
 */
proto.youtube.api.v3.LiveChatNewSponsorDetails.prototype.getMemberLevelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.LiveChatNewSponsorDetails} returns this
 */
proto.youtube.api.v3.LiveChatNewSponsorDetails.prototype.setMemberLevelName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatNewSponsorDetails} returns this
 */
proto.youtube.api.v3.LiveChatNewSponsorDetails.prototype.clearMemberLevelName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatNewSponsorDetails.prototype.hasMemberLevelName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool is_upgrade = 2;
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatNewSponsorDetails.prototype.getIsUpgrade = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.youtube.api.v3.LiveChatNewSponsorDetails} returns this
 */
proto.youtube.api.v3.LiveChatNewSponsorDetails.prototype.setIsUpgrade = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatNewSponsorDetails} returns this
 */
proto.youtube.api.v3.LiveChatNewSponsorDetails.prototype.clearIsUpgrade = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatNewSponsorDetails.prototype.hasIsUpgrade = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    memberLevelName: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    memberMonth: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    userComment: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails}
 */
proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails;
  return proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails}
 */
proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemberLevelName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMemberMonth(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserComment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string member_level_name = 1;
 * @return {string}
 */
proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails.prototype.getMemberLevelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails} returns this
 */
proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails.prototype.setMemberLevelName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails} returns this
 */
proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails.prototype.clearMemberLevelName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails.prototype.hasMemberLevelName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 member_month = 2;
 * @return {number}
 */
proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails.prototype.getMemberMonth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails} returns this
 */
proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails.prototype.setMemberMonth = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails} returns this
 */
proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails.prototype.clearMemberMonth = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails.prototype.hasMemberMonth = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string user_comment = 3;
 * @return {string}
 */
proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails.prototype.getUserComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails} returns this
 */
proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails.prototype.setUserComment = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails} returns this
 */
proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails.prototype.clearUserComment = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMemberMilestoneChatDetails.prototype.hasUserComment = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.youtube.api.v3.LiveChatMembershipGiftingDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.youtube.api.v3.LiveChatMembershipGiftingDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.youtube.api.v3.LiveChatMembershipGiftingDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatMembershipGiftingDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    giftMembershipsCount: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    giftMembershipsLevelName: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.youtube.api.v3.LiveChatMembershipGiftingDetails}
 */
proto.youtube.api.v3.LiveChatMembershipGiftingDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.youtube.api.v3.LiveChatMembershipGiftingDetails;
  return proto.youtube.api.v3.LiveChatMembershipGiftingDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.youtube.api.v3.LiveChatMembershipGiftingDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.youtube.api.v3.LiveChatMembershipGiftingDetails}
 */
proto.youtube.api.v3.LiveChatMembershipGiftingDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGiftMembershipsCount(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGiftMembershipsLevelName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.youtube.api.v3.LiveChatMembershipGiftingDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.youtube.api.v3.LiveChatMembershipGiftingDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.youtube.api.v3.LiveChatMembershipGiftingDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatMembershipGiftingDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 gift_memberships_count = 1;
 * @return {number}
 */
proto.youtube.api.v3.LiveChatMembershipGiftingDetails.prototype.getGiftMembershipsCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.youtube.api.v3.LiveChatMembershipGiftingDetails} returns this
 */
proto.youtube.api.v3.LiveChatMembershipGiftingDetails.prototype.setGiftMembershipsCount = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMembershipGiftingDetails} returns this
 */
proto.youtube.api.v3.LiveChatMembershipGiftingDetails.prototype.clearGiftMembershipsCount = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMembershipGiftingDetails.prototype.hasGiftMembershipsCount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string gift_memberships_level_name = 2;
 * @return {string}
 */
proto.youtube.api.v3.LiveChatMembershipGiftingDetails.prototype.getGiftMembershipsLevelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.LiveChatMembershipGiftingDetails} returns this
 */
proto.youtube.api.v3.LiveChatMembershipGiftingDetails.prototype.setGiftMembershipsLevelName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatMembershipGiftingDetails} returns this
 */
proto.youtube.api.v3.LiveChatMembershipGiftingDetails.prototype.clearGiftMembershipsLevelName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatMembershipGiftingDetails.prototype.hasGiftMembershipsLevelName = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    memberLevelName: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    gifterChannelId: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    associatedMembershipGiftingMessageId: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails}
 */
proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails;
  return proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails}
 */
proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemberLevelName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGifterChannelId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssociatedMembershipGiftingMessageId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string member_level_name = 1;
 * @return {string}
 */
proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails.prototype.getMemberLevelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails} returns this
 */
proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails.prototype.setMemberLevelName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails} returns this
 */
proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails.prototype.clearMemberLevelName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails.prototype.hasMemberLevelName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string gifter_channel_id = 2;
 * @return {string}
 */
proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails.prototype.getGifterChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails} returns this
 */
proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails.prototype.setGifterChannelId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails} returns this
 */
proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails.prototype.clearGifterChannelId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails.prototype.hasGifterChannelId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string associated_membership_gifting_message_id = 3;
 * @return {string}
 */
proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails.prototype.getAssociatedMembershipGiftingMessageId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails} returns this
 */
proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails.prototype.setAssociatedMembershipGiftingMessageId = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails} returns this
 */
proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails.prototype.clearAssociatedMembershipGiftingMessageId = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatGiftMembershipReceivedDetails.prototype.hasAssociatedMembershipGiftingMessageId = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.youtube.api.v3.LiveChatPollDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.youtube.api.v3.LiveChatPollDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.youtube.api.v3.LiveChatPollDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatPollDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.toObject(includeInstance, f),
    status: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.youtube.api.v3.LiveChatPollDetails}
 */
proto.youtube.api.v3.LiveChatPollDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.youtube.api.v3.LiveChatPollDetails;
  return proto.youtube.api.v3.LiveChatPollDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.youtube.api.v3.LiveChatPollDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.youtube.api.v3.LiveChatPollDetails}
 */
proto.youtube.api.v3.LiveChatPollDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.youtube.api.v3.LiveChatPollDetails.PollMetadata;
      reader.readMessage(value,proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = /** @type {!proto.youtube.api.v3.LiveChatPollDetails.PollStatusWrapper.PollStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.youtube.api.v3.LiveChatPollDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.youtube.api.v3.LiveChatPollDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.youtube.api.v3.LiveChatPollDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatPollDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.youtube.api.v3.LiveChatPollDetails.PollStatusWrapper.PollStatus} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.youtube.api.v3.LiveChatPollDetails.PollMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    questionText: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    optionsList: jspb.Message.toObjectList(msg.getOptionsList(),
    proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.youtube.api.v3.LiveChatPollDetails.PollMetadata}
 */
proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.youtube.api.v3.LiveChatPollDetails.PollMetadata;
  return proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.youtube.api.v3.LiveChatPollDetails.PollMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.youtube.api.v3.LiveChatPollDetails.PollMetadata}
 */
proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuestionText(value);
      break;
    case 2:
      var value = new proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption;
      reader.readMessage(value,proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption.deserializeBinaryFromReader);
      msg.addOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.youtube.api.v3.LiveChatPollDetails.PollMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOptionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption.prototype.toObject = function(opt_includeInstance) {
  return proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption.toObject = function(includeInstance, msg) {
  var f, obj = {
    optionText: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    tally: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption}
 */
proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption;
  return proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption}
 */
proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOptionText(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTally(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string option_text = 1;
 * @return {string}
 */
proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption.prototype.getOptionText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption} returns this
 */
proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption.prototype.setOptionText = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption} returns this
 */
proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption.prototype.clearOptionText = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption.prototype.hasOptionText = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 tally = 2;
 * @return {number}
 */
proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption.prototype.getTally = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption} returns this
 */
proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption.prototype.setTally = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption} returns this
 */
proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption.prototype.clearTally = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption.prototype.hasTally = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string question_text = 1;
 * @return {string}
 */
proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.prototype.getQuestionText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.LiveChatPollDetails.PollMetadata} returns this
 */
proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.prototype.setQuestionText = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatPollDetails.PollMetadata} returns this
 */
proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.prototype.clearQuestionText = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.prototype.hasQuestionText = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated PollOption options = 2;
 * @return {!Array<!proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption>}
 */
proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.prototype.getOptionsList = function() {
  return /** @type{!Array<!proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption, 2));
};


/**
 * @param {!Array<!proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption>} value
 * @return {!proto.youtube.api.v3.LiveChatPollDetails.PollMetadata} returns this
*/
proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.prototype.setOptionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption=} opt_value
 * @param {number=} opt_index
 * @return {!proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption}
 */
proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.prototype.addOptions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.youtube.api.v3.LiveChatPollDetails.PollMetadata} returns this
 */
proto.youtube.api.v3.LiveChatPollDetails.PollMetadata.prototype.clearOptionsList = function() {
  return this.setOptionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.youtube.api.v3.LiveChatPollDetails.PollStatusWrapper.prototype.toObject = function(opt_includeInstance) {
  return proto.youtube.api.v3.LiveChatPollDetails.PollStatusWrapper.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.youtube.api.v3.LiveChatPollDetails.PollStatusWrapper} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatPollDetails.PollStatusWrapper.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.youtube.api.v3.LiveChatPollDetails.PollStatusWrapper}
 */
proto.youtube.api.v3.LiveChatPollDetails.PollStatusWrapper.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.youtube.api.v3.LiveChatPollDetails.PollStatusWrapper;
  return proto.youtube.api.v3.LiveChatPollDetails.PollStatusWrapper.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.youtube.api.v3.LiveChatPollDetails.PollStatusWrapper} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.youtube.api.v3.LiveChatPollDetails.PollStatusWrapper}
 */
proto.youtube.api.v3.LiveChatPollDetails.PollStatusWrapper.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.youtube.api.v3.LiveChatPollDetails.PollStatusWrapper.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.youtube.api.v3.LiveChatPollDetails.PollStatusWrapper.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.youtube.api.v3.LiveChatPollDetails.PollStatusWrapper} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.LiveChatPollDetails.PollStatusWrapper.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.youtube.api.v3.LiveChatPollDetails.PollStatusWrapper.PollStatus = {
  UNKNOWN: 0,
  ACTIVE: 1,
  CLOSED: 2
};

/**
 * optional PollMetadata metadata = 1;
 * @return {?proto.youtube.api.v3.LiveChatPollDetails.PollMetadata}
 */
proto.youtube.api.v3.LiveChatPollDetails.prototype.getMetadata = function() {
  return /** @type{?proto.youtube.api.v3.LiveChatPollDetails.PollMetadata} */ (
    jspb.Message.getWrapperField(this, proto.youtube.api.v3.LiveChatPollDetails.PollMetadata, 1));
};


/**
 * @param {?proto.youtube.api.v3.LiveChatPollDetails.PollMetadata|undefined} value
 * @return {!proto.youtube.api.v3.LiveChatPollDetails} returns this
*/
proto.youtube.api.v3.LiveChatPollDetails.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatPollDetails} returns this
 */
proto.youtube.api.v3.LiveChatPollDetails.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatPollDetails.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PollStatusWrapper.PollStatus status = 2;
 * @return {!proto.youtube.api.v3.LiveChatPollDetails.PollStatusWrapper.PollStatus}
 */
proto.youtube.api.v3.LiveChatPollDetails.prototype.getStatus = function() {
  return /** @type {!proto.youtube.api.v3.LiveChatPollDetails.PollStatusWrapper.PollStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.youtube.api.v3.LiveChatPollDetails.PollStatusWrapper.PollStatus} value
 * @return {!proto.youtube.api.v3.LiveChatPollDetails} returns this
 */
proto.youtube.api.v3.LiveChatPollDetails.prototype.setStatus = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.LiveChatPollDetails} returns this
 */
proto.youtube.api.v3.LiveChatPollDetails.prototype.clearStatus = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.LiveChatPollDetails.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.toObject = function(opt_includeInstance) {
  return proto.youtube.api.v3.SuperChatEventSnippet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.youtube.api.v3.SuperChatEventSnippet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.SuperChatEventSnippet.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelId: (f = jspb.Message.getField(msg, 101)) == null ? undefined : f,
    supporterDetails: (f = msg.getSupporterDetails()) && proto.youtube.api.v3.ChannelProfileDetails.toObject(includeInstance, f),
    commentText: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    createdAt: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    amountMicros: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    currency: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    displayString: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    messageType: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    isSuperStickerEvent: (f = jspb.Message.getBooleanField(msg, 11)) == null ? undefined : f,
    superStickerMetadata: (f = msg.getSuperStickerMetadata()) && proto.youtube.api.v3.SuperStickerMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.youtube.api.v3.SuperChatEventSnippet}
 */
proto.youtube.api.v3.SuperChatEventSnippet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.youtube.api.v3.SuperChatEventSnippet;
  return proto.youtube.api.v3.SuperChatEventSnippet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.youtube.api.v3.SuperChatEventSnippet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.youtube.api.v3.SuperChatEventSnippet}
 */
proto.youtube.api.v3.SuperChatEventSnippet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 101:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelId(value);
      break;
    case 2:
      var value = new proto.youtube.api.v3.ChannelProfileDetails;
      reader.readMessage(value,proto.youtube.api.v3.ChannelProfileDetails.deserializeBinaryFromReader);
      msg.setSupporterDetails(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommentText(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedAt(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmountMicros(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayString(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMessageType(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSuperStickerEvent(value);
      break;
    case 12:
      var value = new proto.youtube.api.v3.SuperStickerMetadata;
      reader.readMessage(value,proto.youtube.api.v3.SuperStickerMetadata.deserializeBinaryFromReader);
      msg.setSuperStickerMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.youtube.api.v3.SuperChatEventSnippet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.youtube.api.v3.SuperChatEventSnippet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.SuperChatEventSnippet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 101));
  if (f != null) {
    writer.writeString(
      101,
      f
    );
  }
  f = message.getSupporterDetails();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.youtube.api.v3.ChannelProfileDetails.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getSuperStickerMetadata();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.youtube.api.v3.SuperStickerMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional string channel_id = 101;
 * @return {string}
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.getChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 101, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.SuperChatEventSnippet} returns this
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.setChannelId = function(value) {
  return jspb.Message.setField(this, 101, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.SuperChatEventSnippet} returns this
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.clearChannelId = function() {
  return jspb.Message.setField(this, 101, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.hasChannelId = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional ChannelProfileDetails supporter_details = 2;
 * @return {?proto.youtube.api.v3.ChannelProfileDetails}
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.getSupporterDetails = function() {
  return /** @type{?proto.youtube.api.v3.ChannelProfileDetails} */ (
    jspb.Message.getWrapperField(this, proto.youtube.api.v3.ChannelProfileDetails, 2));
};


/**
 * @param {?proto.youtube.api.v3.ChannelProfileDetails|undefined} value
 * @return {!proto.youtube.api.v3.SuperChatEventSnippet} returns this
*/
proto.youtube.api.v3.SuperChatEventSnippet.prototype.setSupporterDetails = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.youtube.api.v3.SuperChatEventSnippet} returns this
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.clearSupporterDetails = function() {
  return this.setSupporterDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.hasSupporterDetails = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string comment_text = 3;
 * @return {string}
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.getCommentText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.SuperChatEventSnippet} returns this
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.setCommentText = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.SuperChatEventSnippet} returns this
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.clearCommentText = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.hasCommentText = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string created_at = 4;
 * @return {string}
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.getCreatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.SuperChatEventSnippet} returns this
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.setCreatedAt = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.SuperChatEventSnippet} returns this
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.clearCreatedAt = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 amount_micros = 5;
 * @return {number}
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.getAmountMicros = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.youtube.api.v3.SuperChatEventSnippet} returns this
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.setAmountMicros = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.SuperChatEventSnippet} returns this
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.clearAmountMicros = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.hasAmountMicros = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string currency = 6;
 * @return {string}
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.SuperChatEventSnippet} returns this
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.setCurrency = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.SuperChatEventSnippet} returns this
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.clearCurrency = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.hasCurrency = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string display_string = 7;
 * @return {string}
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.getDisplayString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.SuperChatEventSnippet} returns this
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.setDisplayString = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.SuperChatEventSnippet} returns this
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.clearDisplayString = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.hasDisplayString = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint32 message_type = 8;
 * @return {number}
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.getMessageType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.youtube.api.v3.SuperChatEventSnippet} returns this
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.setMessageType = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.SuperChatEventSnippet} returns this
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.clearMessageType = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.hasMessageType = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool is_super_sticker_event = 11;
 * @return {boolean}
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.getIsSuperStickerEvent = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.youtube.api.v3.SuperChatEventSnippet} returns this
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.setIsSuperStickerEvent = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.SuperChatEventSnippet} returns this
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.clearIsSuperStickerEvent = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.hasIsSuperStickerEvent = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional SuperStickerMetadata super_sticker_metadata = 12;
 * @return {?proto.youtube.api.v3.SuperStickerMetadata}
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.getSuperStickerMetadata = function() {
  return /** @type{?proto.youtube.api.v3.SuperStickerMetadata} */ (
    jspb.Message.getWrapperField(this, proto.youtube.api.v3.SuperStickerMetadata, 12));
};


/**
 * @param {?proto.youtube.api.v3.SuperStickerMetadata|undefined} value
 * @return {!proto.youtube.api.v3.SuperChatEventSnippet} returns this
*/
proto.youtube.api.v3.SuperChatEventSnippet.prototype.setSuperStickerMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.youtube.api.v3.SuperChatEventSnippet} returns this
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.clearSuperStickerMetadata = function() {
  return this.setSuperStickerMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.SuperChatEventSnippet.prototype.hasSuperStickerMetadata = function() {
  return jspb.Message.getField(this, 12) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.youtube.api.v3.SuperStickerMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.youtube.api.v3.SuperStickerMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.youtube.api.v3.SuperStickerMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.SuperStickerMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    stickerId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    altText: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    altTextLanguage: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.youtube.api.v3.SuperStickerMetadata}
 */
proto.youtube.api.v3.SuperStickerMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.youtube.api.v3.SuperStickerMetadata;
  return proto.youtube.api.v3.SuperStickerMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.youtube.api.v3.SuperStickerMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.youtube.api.v3.SuperStickerMetadata}
 */
proto.youtube.api.v3.SuperStickerMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStickerId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAltText(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAltTextLanguage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.youtube.api.v3.SuperStickerMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.youtube.api.v3.SuperStickerMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.youtube.api.v3.SuperStickerMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.SuperStickerMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string sticker_id = 1;
 * @return {string}
 */
proto.youtube.api.v3.SuperStickerMetadata.prototype.getStickerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.SuperStickerMetadata} returns this
 */
proto.youtube.api.v3.SuperStickerMetadata.prototype.setStickerId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.SuperStickerMetadata} returns this
 */
proto.youtube.api.v3.SuperStickerMetadata.prototype.clearStickerId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.SuperStickerMetadata.prototype.hasStickerId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string alt_text = 2;
 * @return {string}
 */
proto.youtube.api.v3.SuperStickerMetadata.prototype.getAltText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.SuperStickerMetadata} returns this
 */
proto.youtube.api.v3.SuperStickerMetadata.prototype.setAltText = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.SuperStickerMetadata} returns this
 */
proto.youtube.api.v3.SuperStickerMetadata.prototype.clearAltText = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.SuperStickerMetadata.prototype.hasAltText = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string alt_text_language = 3;
 * @return {string}
 */
proto.youtube.api.v3.SuperStickerMetadata.prototype.getAltTextLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.SuperStickerMetadata} returns this
 */
proto.youtube.api.v3.SuperStickerMetadata.prototype.setAltTextLanguage = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.SuperStickerMetadata} returns this
 */
proto.youtube.api.v3.SuperStickerMetadata.prototype.clearAltTextLanguage = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.SuperStickerMetadata.prototype.hasAltTextLanguage = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.youtube.api.v3.ChannelProfileDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.youtube.api.v3.ChannelProfileDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.youtube.api.v3.ChannelProfileDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.ChannelProfileDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelId: (f = jspb.Message.getField(msg, 101)) == null ? undefined : f,
    channelUrl: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    displayName: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    profileImageUrl: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.youtube.api.v3.ChannelProfileDetails}
 */
proto.youtube.api.v3.ChannelProfileDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.youtube.api.v3.ChannelProfileDetails;
  return proto.youtube.api.v3.ChannelProfileDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.youtube.api.v3.ChannelProfileDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.youtube.api.v3.ChannelProfileDetails}
 */
proto.youtube.api.v3.ChannelProfileDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 101:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelUrl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setProfileImageUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.youtube.api.v3.ChannelProfileDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.youtube.api.v3.ChannelProfileDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.youtube.api.v3.ChannelProfileDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.ChannelProfileDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 101));
  if (f != null) {
    writer.writeString(
      101,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string channel_id = 101;
 * @return {string}
 */
proto.youtube.api.v3.ChannelProfileDetails.prototype.getChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 101, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.ChannelProfileDetails} returns this
 */
proto.youtube.api.v3.ChannelProfileDetails.prototype.setChannelId = function(value) {
  return jspb.Message.setField(this, 101, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.ChannelProfileDetails} returns this
 */
proto.youtube.api.v3.ChannelProfileDetails.prototype.clearChannelId = function() {
  return jspb.Message.setField(this, 101, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.ChannelProfileDetails.prototype.hasChannelId = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional string channel_url = 2;
 * @return {string}
 */
proto.youtube.api.v3.ChannelProfileDetails.prototype.getChannelUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.ChannelProfileDetails} returns this
 */
proto.youtube.api.v3.ChannelProfileDetails.prototype.setChannelUrl = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.ChannelProfileDetails} returns this
 */
proto.youtube.api.v3.ChannelProfileDetails.prototype.clearChannelUrl = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.ChannelProfileDetails.prototype.hasChannelUrl = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string display_name = 3;
 * @return {string}
 */
proto.youtube.api.v3.ChannelProfileDetails.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.ChannelProfileDetails} returns this
 */
proto.youtube.api.v3.ChannelProfileDetails.prototype.setDisplayName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.ChannelProfileDetails} returns this
 */
proto.youtube.api.v3.ChannelProfileDetails.prototype.clearDisplayName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.ChannelProfileDetails.prototype.hasDisplayName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string profile_image_url = 4;
 * @return {string}
 */
proto.youtube.api.v3.ChannelProfileDetails.prototype.getProfileImageUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.youtube.api.v3.ChannelProfileDetails} returns this
 */
proto.youtube.api.v3.ChannelProfileDetails.prototype.setProfileImageUrl = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.ChannelProfileDetails} returns this
 */
proto.youtube.api.v3.ChannelProfileDetails.prototype.clearProfileImageUrl = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.ChannelProfileDetails.prototype.hasProfileImageUrl = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.youtube.api.v3.PageInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.youtube.api.v3.PageInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.youtube.api.v3.PageInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.PageInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalResults: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    resultsPerPage: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.youtube.api.v3.PageInfo}
 */
proto.youtube.api.v3.PageInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.youtube.api.v3.PageInfo;
  return proto.youtube.api.v3.PageInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.youtube.api.v3.PageInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.youtube.api.v3.PageInfo}
 */
proto.youtube.api.v3.PageInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalResults(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResultsPerPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.youtube.api.v3.PageInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.youtube.api.v3.PageInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.youtube.api.v3.PageInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.youtube.api.v3.PageInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 total_results = 1;
 * @return {number}
 */
proto.youtube.api.v3.PageInfo.prototype.getTotalResults = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.youtube.api.v3.PageInfo} returns this
 */
proto.youtube.api.v3.PageInfo.prototype.setTotalResults = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.PageInfo} returns this
 */
proto.youtube.api.v3.PageInfo.prototype.clearTotalResults = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.PageInfo.prototype.hasTotalResults = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 results_per_page = 2;
 * @return {number}
 */
proto.youtube.api.v3.PageInfo.prototype.getResultsPerPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.youtube.api.v3.PageInfo} returns this
 */
proto.youtube.api.v3.PageInfo.prototype.setResultsPerPage = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.youtube.api.v3.PageInfo} returns this
 */
proto.youtube.api.v3.PageInfo.prototype.clearResultsPerPage = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.youtube.api.v3.PageInfo.prototype.hasResultsPerPage = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.youtube.api.v3);
